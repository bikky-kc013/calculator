// Get the display element by its ID
const display = document.getElementById("display-box");

function add(a, b) {
  return a + b;
}

function subtract(a, b) {
  return a - b;
}

function multiply(a, b) {
  return a * b;
}

function divide(a, b) {
  return a / b;
}

// Function to evaluate a mathematical expression
function evaluateExpression(expression) {
  // Regular expression to match the pattern of a simple expression (e.g., "3+4")
  const regex = /(\d+)([+\-*/])(\d+)/;
  const match = expression.match(regex);

  // Destructure the matched values into operand1, operator, and operand2
  const [, operand1, operator, operand2] = match;

  // Convert operands to floating-point numbers
  const num1 = parseFloat(operand1);
  const num2 = parseFloat(operand2);

  if (operator === "+") {
    return add(num1, num2);
  } else if (operator === "-") {
    return subtract(num1, num2);
  } else if (operator === "/") {
    return divide(num1, num2);
  } else if (operator === "*") {
    return multiply(num1, num2);
  } else {
    return NaN;
  }
}

const buttons = document.querySelectorAll(".key, .operation, .clear, .total");

buttons.forEach((button) => {
  button.addEventListener("click", () => {
    const value = button.textContent;

    if (value === "C") {
      display.value = "";
    } else if (value === "=") {
      const displayValue = display.value;
      const result = evaluateExpression(displayValue);
      display.value = isNaN(result) ? "Error" : result;
    } else {
      display.value += value;
    }
  });
});

//The explaination is generated by ai but the logic is 90% developed by me I have used chat gpt to help me to fix styling of the html.

/* 
(\d)=> this will accept the number from 0 to 9 and (\d)+ => this clarifies that the number can occur
      more than one time. Example:- If you click 999 then this regex allows the 999 to be clicked
 
     (: Opening parenthesis starts a capturing group.
     +: The plus sign matches the literal plus character.
     \-: The backslash \ is an escape character, and in this context, it's used to escape the hyphen - to match the literal hyphen character.
         This is necessary because a hyphen inside square brackets has a special meaning (indicating a range), so it needs to be escaped to be treated as a literal hyphen.
     *: The asterisk matches the literal asterisk character.
     /: The forward slash matches the literal forward slash character.
     ): Closing parenthesis ends the capturing group.

*/

/*
The match method is called on the expression string, and it takes the regex as an argument.
This method checks if the expression string matches the pattern defined by the regular expression.
The result of the match method is stored in the variable named match.
If there is a match, match will be an array containing information about the match.
The first element of the array (match[0]) is the full matched string, and subsequent elements (match[1], match[2], etc.)
are the values captured by the groups in the regular expression.

for example, if expression is "3+5", the match result would be:

["3+5", "3", "+", "5"]
match[0] is the full matched string: "3+5".
match[1] is the first captured group: "3" (left operand).
match[2] is the second captured group: "+" (operator).
match[3] is the third captured group: "5" (right operand).
*/
